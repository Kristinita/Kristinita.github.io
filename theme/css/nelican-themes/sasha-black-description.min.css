body{background:#000;color:#ff8c00}a{color:violet}a:hover{background-color:#dda0dd99}a:focus{background:indigo}em{color:#ff69b4}img{box-shadow:0 0 2rem #000}.SashaPageLoading{box-shadow:none;display:none}kbd{background:#d2691e;color:#ffefd5}td,th{border-color:#ff8c00}.SashaAsideBottomText{bottom:14%;color:#fff}blockquote{background:#fcfcfc;border-left:.5rem solid #ff5a00;color:#333}blockquote>p>em{color:#ff1493}blockquote>p>a{color:#8b008b}::selection{background:#ffe4b5fc;color:hsla(0,79%,72%,.467)}.navbar,.navbar-item,.tag:not(body){background-color:#ff8c00;color:#000}.navbar-item.has-dropdown:hover,.navbar-item.has-dropdown:hover .navbar-link{background-color:#000;color:violet}.navbar-item.has-dropdown:hover .navbar-link:not(.is-arrowless):after{border-color:violet}.navbar-link{background-color:#ff8c00;color:#000}.navbar-link:not(.is-arrowless):after{border-color:#000}.navbar-link:hover{background-color:#000;color:violet}.navbar-link:hover:not(.is-arrowless):after{border-color:violet}.navbar-dropdown{background-color:#ff8c00;border-top:#ff8c00}.navbar-dropdown a.navbar-item:hover{background-color:#000;color:violet}.navbar-burger{color:#000}.navbar-burger:hover{background-color:#ff8c00;color:#000}div.a2a_floating_style{background-color:orange}@media screen and (orientation:portrait){.navbar-menu{background-color:#ff8c00}}
/*# sourceMappingURL=data:application/json;base64, */
